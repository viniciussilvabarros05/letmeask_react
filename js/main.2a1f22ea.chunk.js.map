{"version":3,"sources":["assets/images/illustration.svg","assets/images/google-icon.svg","assets/images/logo.svg","components/Button.tsx","services/firebase.ts","contexts/AuthContext.tsx","hooks/useAuth.tsx","pages/Home.tsx","pages/NewRoom.tsx","assets/images/copy.svg","components/RoomCode.tsx","hooks/useRoom.tsx","components/Question.tsx","pages/Room.tsx","assets/images/delete.svg","assets/images/check.svg","assets/images/answer.svg","pages/AdminRoom1.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","isOutlined","props","className","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","auth","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","Home","history","useHistory","roomCode","setRoomCode","push","catch","error","event","preventDefault","trim","ref","get","roomRef","exists","alert","val","endedAt","src","isllustrationImg","alt","logoImg","onClick","googleIconImg","type","placeholder","onChange","target","NewRoom","newRoom","setNewRoom","title","authorId","firebaseRoom","key","onSubmit","to","RoomCode","navigator","clipboard","writeText","code","copyImg","useRoom","roomId","questions","setQuestions","setTitle","on","room","databaseRoom","firebaseQuestions","parsedQuestions","Object","entries","map","content","author","isHighLighted","isAnswered","likeCount","values","likes","length","likeId","find","Question","Room","useParams","newQuestion","setNewQuestion","question","questionId","remove","disabled","handleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","AdminRoom","window","confirm","update","Date","handleCheckQuestionAsAnswered","checkImg","handleHighLightQuestion","answerImg","handleDeleteQuestion","deleteImg","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a1f22ea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","import { ButtonHTMLAttributes } from \"react\";\r\nimport \"../style/button.scss\"\r\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\r\n    isOutlined?: boolean\r\n}\r\n// Usando propriedades do react para um botão devido ao Typescript\r\n\r\n\r\nexport function Button({ isOutlined = false, ...props }: ButtonProps) {\r\n\r\n    return (\r\n\r\n        <button className={`button ${isOutlined ? 'outlined' : ''}`} \r\n        {...props}/>\r\n    )\r\n}","\r\n// import firebase from \"firebase/app\";\r\n// require(\"dotenv\").config()\r\n\r\n// import \"firebase/auth\"\r\n// import 'firebase/database'\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: process.env.REACT_APP_API_KEY,\r\n//     authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n//     databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n//     projectId: process.env.REACT_APP_PROJECT_ID,\r\n//     storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n//     messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n//     appId: process.env.REACT_APP_APP_ID\r\n//   };\r\n\r\n\r\n// firebase.initializeApp(firebaseConfig);\r\n\r\n\r\n// export const auth = firebase.auth()\r\n// export const database = firebase.database()\r\n// Import the functions you need from the SDKs you need\r\n\r\nimport firebase from \"firebase/compat/app\"\r\nimport \"firebase/compat/auth\"\r\nimport \"firebase/compat/database\"\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBeskfi2YOUE4I4rq7He_eyUSiIQtQygks\",\r\n  authDomain: \"letmeask-web-8917e.firebaseapp.com\",\r\n  databaseURL: \"https://letmeask-web-8917e-default-rtdb.firebaseio.com\",\r\n  projectId: \"letmeask-web-8917e\",\r\n  storageBucket: \"letmeask-web-8917e.appspot.com\",\r\n  messagingSenderId: \"96205728779\",\r\n  appId: \"1:96205728779:web:cdee8ed3dd9239ace56b0e\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const database = firebase.database()\r\nexport const auth = firebase.auth()\r\n\r\nexport default { database, firebase, auth }","import { GoogleAuthProvider } from \"firebase/auth\"\r\nimport { useEffect, useState, } from \"react\"\r\nimport { createContext, ReactNode } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { auth } from \"../services/firebase\"\r\n\r\n\r\ntype User = {\r\n    id: string,\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\ntype AuthContextType = {\r\n    user: User | undefined,\r\n    signInWithGoogle: () => Promise<void>\r\n}\r\ntype AuthContextTypeProps = {\r\n    children: ReactNode //Formato para que o typescript identifique o tipo de dado  component dentro do componente\r\n}\r\n\r\n//Necessário criar um contexto para aplicação, fazendo com que todos os componentes e páginas tenham acesso a uma informação (Estado)\r\nexport const AuthContext = createContext({} as AuthContextType) // Usando e exportando contexto com  contextAPI para gerenciar estados\r\n\r\n\r\nexport function AuthContextProvider(props: AuthContextTypeProps) {\r\n\r\n\r\n    const [user, setUser] = useState<User>() // Criando estado\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => { //Listener do auth firebase que faz com que a informação de usuario logado não se perca\r\n\r\n            if (user) {\r\n                const { displayName, photoURL, uid\r\n                } = user\r\n\r\n\r\n\r\n                if (!displayName || !photoURL) {\r\n                    throw new Error(\"Missing information from Google Account.\")\r\n                }\r\n\r\n\r\n                setUser({\r\n                    id: uid,\r\n                    name: displayName,\r\n                    avatar: photoURL\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n        return () => {\r\n            unsubscribe() //Quando temos um event Listener, precisamos retornar algo caso a aplicação não necessite mais do evento em um ponto da aplicação\r\n            //Assim evita do event Listener ficar ouvindo e vendo alterações que não virão mais ou que sua função já não é mais necessária\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    async function signInWithGoogle() {\r\n        const provider = new GoogleAuthProvider()\r\n      \r\n        const result = await auth.signInWithPopup(provider)\r\n\r\n\r\n\r\n        if (result.user) {\r\n            const { displayName, photoURL, uid\r\n            } = result.user\r\n\r\n\r\n\r\n            if (!displayName || !photoURL) {\r\n                throw new Error(\"Missing information from Google Account.\")\r\n            }\r\n\r\n\r\n            setUser({\r\n                id: uid,\r\n                name: displayName,\r\n                avatar: photoURL\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","import { useContext } from \"react\";\r\nimport {AuthContext} from \"../contexts/AuthContext\"\r\n\r\nexport function useAuth(){\r\n    const value = useContext(AuthContext)\r\n\r\n    return value\r\n}","import isllustrationImg from \"../assets/images/illustration.svg\"\r\nimport googleIconImg from '../assets/images/google-icon.svg'\r\nimport logoImg from \"../assets/images/logo.svg\"\r\nimport \"../style/auth.scss\"\r\nimport { Button } from \"../components/Button\"\r\n\r\nimport { useHistory } from \"react-router\"\r\n\r\n\r\nimport { useAuth } from \"../hooks/useAuth\"\r\nimport { FormEvent, useState } from \"react\"\r\nimport { database } from \"../services/firebase\"\r\n\r\n\r\nexport function Home() {\r\n\r\n    const history = useHistory()//O useHistory dá acesso à instância que você pode usar para navegar.\r\n\r\n    const { user, signInWithGoogle } = useAuth()\r\n\r\n\r\n    const [roomCode, setRoomCode] = useState('') //Criando estados para a sala\r\n\r\n\r\n    async function handleCreateRoom() {\r\n      \r\n        if (user){\r\n            history.push(\"/rooms/new\")\r\n        }\r\n\r\n        if (!user) {\r\n            await signInWithGoogle().catch(error=>{\r\n                if (error){\r\n                    history.push(\"/\")\r\n                }\r\n            })\r\n        }\r\n      \r\n\r\n    }\r\n\r\n\r\n    async function handleJoinRoom(event: FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (roomCode.trim() === \"\") {\r\n            return\r\n\r\n        }\r\n\r\n        const roomRef = await database.ref(`rooms/${roomCode}`).get()\r\n\r\n        if (!roomRef.exists()) {//Verificando se a sala que o usuario está tentando acessar existe\r\n            alert(\"Room does not Exists\")\r\n            return\r\n        }\r\n\r\n        if (roomRef.val().endedAt) {\r\n            alert(\"Room already closed.\")\r\n            return\r\n        }\r\n\r\n        history.push(`/rooms/${roomCode}`)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"page-auth\">\r\n            <aside>\r\n                <img src={isllustrationImg} alt=\"Islutrando perguntas e respostas\" />\r\n                <strong>Crie salas de  Q&amp;A ao-vivo</strong>\r\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n            </aside>\r\n            <main>\r\n                <div className=\"main-content\">\r\n                    <img src={logoImg} alt=\"Letmeask\"></img>\r\n                    <button onClick={handleCreateRoom} className=\"create-room\">\r\n                        <img src={googleIconImg} alt=\"Google\"></img>\r\n                        Crie sua sala com o Google\r\n                    </button>\r\n                    <div className=\"separator\">ou entre em uma sala</div>\r\n\r\n                    <form>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Digie o código da sala\"\r\n                            onChange={event => setRoomCode(event.target.value)} //Acessando a sala através do código key do firebase\r\n                            value={roomCode}\r\n                        />\r\n                        <Button type=\"submit\" onClick={handleJoinRoom}>\r\n                            Entrar na sala\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}","import { Button } from \"../components/Button\"\r\nimport isllustrationImg from \"../assets/images/illustration.svg\"\r\nimport logoImg from \"../assets/images/logo.svg\"\r\nimport { FormEvent, useState } from \"react\"\r\n\r\nimport { Link } from \"react-router-dom\"\r\nimport { useAuth } from \"../hooks/useAuth\"\r\nimport \"../style/auth.scss\"\r\nimport { database } from \"../services/firebase\"\r\nimport { useHistory } from \"react-router\"\r\n\r\n\r\nexport function NewRoom() {\r\n    const { user } = useAuth()\r\n    const [newRoom, setNewRoom] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    async function handleCreateRoom(event: FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (newRoom.trim() === \"\") {\r\n            return\r\n        }\r\n        /*=============== Usando raltime do firebase =================*/\r\n        const roomRef = database.ref(\"rooms\") //No banco de daos terá uma categoria chamada rooms\r\n        const firebaseRoom = await roomRef.push({\r\n            title: newRoom,\r\n            authorId: user?.id\r\n        })// Enviando uma nova room para rooms no firebase\r\n\r\n        history.push(`/rooms/${firebaseRoom.key}`) //Passando id com key do firebase \r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"page-auth\">\r\n            <aside>\r\n                <img src={isllustrationImg} alt=\"Islutrando perguntas e respostas\" />\r\n                <strong>Crie salas de  Q&amp;A ao-vivo</strong>\r\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n            </aside>\r\n            <main>\r\n                <div className=\"main-content\">\r\n                    <img src={logoImg} alt=\"Letmeask\"></img>\r\n\r\n                    <h2>Criar uma nova sala</h2>\r\n                    <form onSubmit={handleCreateRoom}>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Digie o código da sala\"\r\n                            onChange={event => setNewRoom(event.target.value)}\r\n                            value={newRoom}\r\n                        />\r\n                        <Button type=\"submit\">\r\n                            Criar sala\r\n                        </Button>\r\n                    </form>\r\n                    <p>\r\n                        Quer entrar em uma ala existente? <Link to=\"/\">Clique aqui</Link>\r\n                    </p>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from \"../assets/images/copy.svg\"\r\n\r\nimport \"../style/room-code.scss\"\r\n\r\ntype RoomCodeProps = {\r\n    code:string\r\n}\r\n\r\nexport function RoomCode(props:RoomCodeProps){\r\n\r\n    function copyRoomCodeToClipboard(){\r\n        navigator.clipboard.writeText(props.code)\r\n    }\r\n\r\n    return(\r\n        <button className=\"room-code\" onClick={copyRoomCodeToClipboard}>\r\n            <div>\r\n                <img src={copyImg} alt = \"Copy room code\"/>\r\n            </div>\r\n            <span>Sala #{props.code}</span>\r\n        </button>\r\n    )\r\n}","\r\nimport { useEffect, useState } from \"react\"\r\nimport { database } from \"../services/firebase\"\r\nimport { useAuth } from \"./useAuth\"\r\n\r\n\r\ntype QuestionType = {\r\n    id: string;\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    }\r\n\r\n    content: string;\r\n    isAnswered: boolean,\r\n    isHighLighted: boolean\r\n    likeCount: number,\r\n    likeId: string | undefined,\r\n}\r\n\r\ntype FirebaseQuestions = Record<string, {  //O Record tipa o objeto quando houver, passando o tipo string para o id do objeto e um objeto para as tipagens do valor do objeto\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    }\r\n\r\n    content: string;\r\n    isAnswered: boolean,\r\n    isHighLighted: boolean\r\n    likes: Record<string, {\r\n        authorId: string;\r\n    }>\r\n\r\n\r\n}>\r\n\r\n\r\n\r\nexport function useRoom(roomId: string) {\r\n    const { user } = useAuth()\r\n    const [questions, setQuestions] = useState<QuestionType[]>([])\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n\r\n\r\n\r\n    useEffect(() => { // Neste ponto do código, o useEffect está garantido que os dados da sala serão carregados todas as vezes que o usuário trocar de sala ou alguma informação da sala mudar\r\n\r\n\r\n        const roomRef = database.ref(`rooms/${roomId}`)\r\n\r\n        roomRef.on(\"value\", room => { //Ouvindo toda e qualquer modificação no valor de uma room\r\n\r\n            const databaseRoom = room.val()\r\n\r\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {}\r\n            //método  entries do js que retorna os valores de dentro do objeto room em formato de array. Sendo [key,value\r\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n                return {\r\n                    id: key,\r\n                    content: value.content,\r\n                    author: value.author,\r\n                    isHighLighted: value.isHighLighted,\r\n                    isAnswered: value.isAnswered,\r\n                    likeCount: Object.values(value.likes ?? {}).length, //?? pode vir vazio\r\n                    likeId: Object.entries(value.likes ?? {}).find(([key,like]) => like.authorId === user?.id)?.[0] // O find procura uma informação igual dentro do array e retorna a informação, existe o some que apenas retorna se encontrou ou não\r\n                }\r\n            })\r\n\r\n            setQuestions(parsedQuestions)\r\n            setTitle(databaseRoom.title)\r\n        })\r\n    }, [roomId, user?.id])\r\n\r\n    return { questions, title } // retornando titulo e questões da sala\r\n}","import { ReactNode } from \"react\"\r\n\r\n\r\ntype QuestionProps = {\r\n    content: string,\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    }\r\n    children?: ReactNode\r\n    isAnswered?: boolean,\r\n    isHighLighted?: boolean\r\n}\r\n\r\n\r\n\r\nexport function Question({\r\n    content,\r\n    author,\r\n    children,\r\n    isAnswered = false,\r\n    isHighLighted = false\r\n}: QuestionProps) {\r\n    return (\r\n        <div className={`question ${isAnswered ? 'answered' : ''} ${isHighLighted ? \"highlighted\" : ''}`}>\r\n            <p>{content}</p>\r\n            <footer>\r\n                <div className=\"user-info\">\r\n                    <img src={author.avatar} alt={author.name} />\r\n                    <span>{author.name}</span>\r\n                </div>\r\n                <div>{children}</div>\r\n            </footer>\r\n        </div>)\r\n}","import \"../style/room.scss\"\r\nimport \"../style/questions.scss\"\r\n\r\nimport logoImg from \"../assets/images/logo.svg\"\r\nimport { Button } from \"../components/Button\"\r\nimport { RoomCode } from \"../components/RoomCode\"\r\nimport { useParams } from \"react-router-dom\"\r\n\r\nimport { useAuth } from \"../hooks/useAuth\"\r\nimport { database } from \"../services/firebase\"\r\nimport { useRoom } from \"../hooks/useRoom\"\r\nimport { Question } from \"../components/Question\"\r\nimport { FormEvent, useState } from \"react\"\r\n\r\n\r\ntype RoomParams = {\r\n    id: string\r\n}\r\n\r\n\r\n\r\n\r\nexport function Room() {\r\n    const { user } = useAuth()\r\n    const params = useParams<RoomParams>() //Usando paramentros do navegador \r\n    const roomId = params.id\r\n    const { questions, title } = useRoom(roomId)\r\n    const [newQuestion, setNewQuestion] = useState(\"\")\r\n\r\n\r\n\r\n\r\n    async function handleSendQuestion(event: FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (newQuestion.trim() === \"\") {\r\n            return\r\n        }\r\n        if (!user) {\r\n            throw new Error(\"You must be logged in\")\r\n\r\n        }\r\n\r\n\r\n        const question = {\r\n            content: newQuestion,\r\n            author: {\r\n                name: user?.name,\r\n                avatar: user.avatar\r\n            },\r\n            isHighLighted: false,\r\n            isAnswered: false\r\n        }\r\n\r\n        await database.ref(`rooms/${roomId}/questions`).push(question) //Subindo as perguntas para o banco de dados\r\n\r\n        setNewQuestion(\"\")\r\n\r\n    }\r\n\r\n\r\n    async function handleLikeQuestion(questionId: string, likeId: string | undefined) { //Passando parametro questionId para identificar qual pergunta dar like\r\n        if (likeId) {\r\n            await database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove()\r\n        }else{\r\n            await database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push({\r\n                authorId: user?.id\r\n            })\r\n        }\r\n\r\n\r\n      \r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"page-room\">\r\n\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmesask\" />\r\n                    <RoomCode code={roomId}></RoomCode> {/* Passando o paramentro id de parametros*/}\r\n                </div>\r\n            </header>\r\n\r\n            <main className=\"content\">\r\n                <div className=\"room-title\">\r\n\r\n                    <h1>Sala {title}</h1>\r\n                    {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n\r\n                </div>\r\n\r\n                <form onSubmit={handleSendQuestion}>\r\n                    <textarea\r\n                        placeholder=\"O que você quer perguntar?\"\r\n                        onChange={event => setNewQuestion(event.target.value)}\r\n                        value={newQuestion}\r\n                    />\r\n                    <div className=\"form-footer\">\r\n                        {user ?\r\n\r\n                            (\r\n\r\n                                <div className=\"user-info\">\r\n                                    <img src={user.avatar} alt={user.name}></img>\r\n                                    <span>{user.name}</span>\r\n                                </div>) : (\r\n\r\n                                <span>Para enviar uma pergunta, <button>faça seu login</button></span>\r\n\r\n                            )}\r\n\r\n                        <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button> {/*Desabilitando o botão caso não tenha user*/}\r\n\r\n                    </div>\r\n                </form>\r\n                <div className=\"questions-list\">\r\n                    {questions.map((question) => {\r\n                        return (\r\n\r\n                            <Question\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                                isAnswered = {question.isAnswered}\r\n                                isHighLighted = {question.isHighLighted}\r\n                            >\r\n                                <button\r\n                                    className={`like-button ${question.likeId ? 'liked' : ''}`}\r\n                                    type=\"button\"\r\n                                    aria-label=\"Marcar como gostei\"\r\n                                    onClick={() => handleLikeQuestion(question.id, question.likeId)}\r\n                                >\r\n                                    {question.likeCount > 0 && <span className=\"liked\">{question.likeCount}</span>}\r\n                                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n                                    </svg>\r\n\r\n                                </button>\r\n\r\n                            </Question>\r\n\r\n                        )\r\n                    })}\r\n\r\n                </div>\r\n\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","import \"../style/room.scss\"\r\nimport \"../style/questions.scss\"\r\nimport logoImg from \"../assets/images/logo.svg\"\r\nimport { RoomCode } from \"../components/RoomCode\"\r\nimport { useParams, useHistory } from \"react-router-dom\"\r\nimport { useRoom } from \"../hooks/useRoom\"\r\nimport { Question } from \"../components/Question\"\r\nimport { Button } from \"../components/Button\"\r\nimport deleteImg from \"../assets/images/delete.svg\"\r\nimport { database } from \"../services/firebase\"\r\nimport checkImg from \"../assets/images/check.svg\"\r\nimport answerImg from \"../assets/images/answer.svg\"\r\n\r\ntype RoomParams = {\r\n    id: string\r\n}\r\n\r\n\r\nexport function AdminRoom() {\r\n\r\n    const params = useParams<RoomParams>() //Usando paramentros do navegador \r\n    const roomId = params.id\r\n    const history = useHistory()\r\n    const { questions, title } = useRoom(roomId)\r\n\r\n/*============================ DELETANDO PERGUNTAS =============================*/\r\n    async function handleDeleteQuestion(questionId: string) {\r\n        if (window.confirm(\"Tem certeza que vode deseja excluir esta pergunta?\")) {\r\n            await database.ref(`rooms/${roomId}/questions/${questionId}`).remove()\r\n        }\r\n    }\r\n\r\n\r\n\r\n /*===================== MARCANDO PERGUNTAS RESPONDIDDAS =======================*/\r\n    async function handleCheckQuestionAsAnswered(questionId: string) {\r\n\r\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n            isAnswered: true\r\n        })\r\n    }\r\n\r\n/*============= SINALIZANDO PERGUNTAS QUE ESTÃO SENDO RESPONDIDAS ==============*/\r\n    async function handleHighLightQuestion(questionId: string) {\r\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n            isHighLighted: true\r\n        })\r\n    }\r\n\r\n\r\n/*============================= ENCERRANDO SALA =============================== */\r\n    async function handleEndRoom() {\r\n        await database.ref(`rooms/${roomId}`).update({\r\n            endedAt: new Date()\r\n        })\r\n\r\n\r\n        history.push(\"/\")\r\n    }\r\n\r\n/*----------------------------------------------------------------------------- */\r\n\r\n    return (\r\n        <div id=\"page-room\">\r\n\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmesask\" />\r\n                    <div>\r\n                        <RoomCode code={roomId}></RoomCode> {/* Passando o paramentro id de parametros*/}\r\n                        <Button isOutlined onClick={handleEndRoom}>Encerrar sala</Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </header>\r\n\r\n            <main className=\"content\">\r\n                <div className=\"room-title\">\r\n\r\n                    <h1>Sala {title}</h1>\r\n                    {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n\r\n                </div>\r\n\r\n                <div className=\"questions-list\">\r\n                    {questions.map((question) => {\r\n                        return (\r\n\r\n                            <Question\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                                isAnswered = {question.isAnswered}\r\n                                isHighLighted = {question.isHighLighted}\r\n                            >\r\n\r\n\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => handleCheckQuestionAsAnswered(question.id)}>\r\n                                    <img src={checkImg} />\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => handleHighLightQuestion(question.id)}>\r\n                                    <img src={answerImg} />\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => handleDeleteQuestion(question.id)}>\r\n                                    <img src={deleteImg} />\r\n                                </button>\r\n\r\n                            </Question>\r\n\r\n                        )\r\n                    })}\r\n\r\n                </div>\r\n\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}","\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\"\nimport { Home } from './pages/Home';\nimport { NewRoom } from \"./pages/NewRoom\"\nimport { Room } from \"./pages/Room\";\nimport { AuthContextProvider } from \"./contexts/AuthContext\";\n\nimport { AdminRoom } from \"./pages/AdminRoom1\";\n\n\n\n\n//Necessário criar um contexto para aplicação, fazendo com que todos os componentes e páginas tenham acesso a uma informação (Estado)\n// Usando e exportando contexto com  contextAPI para gerenciar estados\n\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n\n      <AuthContextProvider>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/rooms/new\" component={NewRoom} />\n          <Route path=\"/rooms/:id\" component={Room} />\n          <Route path=\"/admin/rooms/:id\" component={AdminRoom} />\n        </Switch>\n      </AuthContextProvider>\n\n    </BrowserRouter>\n\n  )\n\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./services/firebase\"\nimport \"./style/global.scss\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}